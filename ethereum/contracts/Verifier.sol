// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

contract Verifier {
    address public operator;

    /**
     * @dev constructor sets the operator's address
     * @param _operator address of the contract's operator
     */
    constructor(address _operator) public {
        operator = _operator;
    }

    /**
     * @dev verifies the operator as the original tx sender
     * @return bool indicating if operator is the original sender
     */
    function verifyOperator() public view returns (bool) {
        return tx.origin == operator;
    }

    /**
     * @dev recreates the hashed prefixed message signed on the client from raw message bytes
     * @param _rawMessage bytes _rawMessage is the raw message
     * @param _signature bytes _signature is the operator's signature upon the hashed, prefixed message
     * @return bool indicating if operator is the signer
     */
    function verifyBytes(bytes memory _rawMessage, bytes memory _signature)
        public
        view
        returns (bool)
    {
        // This recreates the message hash that was signed on the client
        bytes32 signedHash = prefixed(keccak256(_rawMessage));
        // Verify that this signature is by the operator on the message hash
        return verify(signedHash, _signature);
    }

    /**
     * @dev Builds a prefixed hash to mimic the behavior of eth_sign
     * @param _hashedMessage bytes32 is the unprefixed hashed message
     * @return bytes32 the prefixed hashed message
     */
    function prefixed(bytes32 _hashedMessage) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", _hashedMessage));
    }

    /**
     * @dev Verify if a hashed message was signed by the contract's operator
     * @param _hash bytes32 _hash is hashed message
     * @param _signature bytes _signature generated when operator signed the hash
     * @return bool indicating if operator is the signer
     */
    function verify(bytes32 _hash, bytes memory _signature) public view returns (bool) {
        address signer = recover(_hash, _signature);
        return operator == signer;
    }

    /**
     * @dev Recover signer address from a message using their signature
     * @param _hash bytes32 is the signed message
     * @param _signature bytes is generated by signing a hashed message
     * @return address recovered from the given hash and signature
     */
    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {
        // Check the signature length
        if (_signature.length != 65) {
            revert("Verifier: invalid signature length");
        }

        bytes32 r;
        bytes32 s;
        uint8 v;

        // Divide the signature in r, s and v variables
        // ecrecover takes the signature parameters, and the only way to get them
        // currently is to use assembly.
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            r := mload(add(_signature, 0x20))
            s := mload(add(_signature, 0x40))
            v := byte(0, mload(add(_signature, 0x60)))
        }

        // Prevent malleable signatures, see https://www.di.ens.fr/~stern/data/St101.pdf
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            revert("ECDSA: invalid signature 's' value");
        }

        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions
        if (v < 27) {
            v += 27;
        }

        if (v != 27 && v != 28) {
            revert("Verifier: invalid signature 'v' value");
        }

        address signer = ecrecover(_hash, v, r, s);
        require(signer != address(0), "Verifier: invalid signature");

        return signer;
    }
}
